// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/dependencies.go

// Package mock_services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	post "github.com/gadhittana01/socialmedia/pkg/post"
	post_tags "github.com/gadhittana01/socialmedia/pkg/post_tags"
	tag "github.com/gadhittana01/socialmedia/pkg/tag"
	user "github.com/gadhittana01/socialmedia/pkg/user"
	gomock "github.com/golang/mock/gomock"
)

// MockUserResource is a mock of UserResource interface.
type MockUserResource struct {
	ctrl     *gomock.Controller
	recorder *MockUserResourceMockRecorder
}

// MockUserResourceMockRecorder is the mock recorder for MockUserResource.
type MockUserResourceMockRecorder struct {
	mock *MockUserResource
}

// NewMockUserResource creates a new mock instance.
func NewMockUserResource(ctrl *gomock.Controller) *MockUserResource {
	mock := &MockUserResource{ctrl: ctrl}
	mock.recorder = &MockUserResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserResource) EXPECT() *MockUserResourceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserResource) CreateUser(ctx context.Context, fullname string) (user.CreateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, fullname)
	ret0, _ := ret[0].(user.CreateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserResourceMockRecorder) CreateUser(ctx, fullname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserResource)(nil).CreateUser), ctx, fullname)
}

// DeleteUser mocks base method.
func (m *MockUserResource) DeleteUser(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserResourceMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserResource)(nil).DeleteUser), ctx, id)
}

// GetUser mocks base method.
func (m *MockUserResource) GetUser(ctx context.Context, id int32) (user.GetUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(user.GetUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserResourceMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserResource)(nil).GetUser), ctx, id)
}

// GetUsers mocks base method.
func (m *MockUserResource) GetUsers(ctx context.Context) ([]user.GetUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]user.GetUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserResourceMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserResource)(nil).GetUsers), ctx)
}

// UpdateUser mocks base method.
func (m *MockUserResource) UpdateUser(ctx context.Context, arg user.UpdateUserParams) (user.UpdateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(user.UpdateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserResourceMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserResource)(nil).UpdateUser), ctx, arg)
}

// MockPostResource is a mock of PostResource interface.
type MockPostResource struct {
	ctrl     *gomock.Controller
	recorder *MockPostResourceMockRecorder
}

// MockPostResourceMockRecorder is the mock recorder for MockPostResource.
type MockPostResourceMockRecorder struct {
	mock *MockPostResource
}

// NewMockPostResource creates a new mock instance.
func NewMockPostResource(ctrl *gomock.Controller) *MockPostResource {
	mock := &MockPostResource{ctrl: ctrl}
	mock.recorder = &MockPostResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostResource) EXPECT() *MockPostResourceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostResource) CreatePost(ctx context.Context, arg post.CreatePostParams) (post.CreatePostRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, arg)
	ret0, _ := ret[0].(post.CreatePostRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostResourceMockRecorder) CreatePost(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostResource)(nil).CreatePost), ctx, arg)
}

// DeletePost mocks base method.
func (m *MockPostResource) DeletePost(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostResourceMockRecorder) DeletePost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostResource)(nil).DeletePost), ctx, id)
}

// GetPost mocks base method.
func (m *MockPostResource) GetPost(ctx context.Context, id int32) (post.GetPostRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(post.GetPostRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostResourceMockRecorder) GetPost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostResource)(nil).GetPost), ctx, id)
}

// GetPosts mocks base method.
func (m *MockPostResource) GetPosts(ctx context.Context) ([]post.GetPostsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]post.GetPostsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostResourceMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostResource)(nil).GetPosts), ctx)
}

// UpdatePost mocks base method.
func (m *MockPostResource) UpdatePost(ctx context.Context, arg post.UpdatePostParams) (post.UpdatePostRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, arg)
	ret0, _ := ret[0].(post.UpdatePostRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostResourceMockRecorder) UpdatePost(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostResource)(nil).UpdatePost), ctx, arg)
}

// MockTagResource is a mock of TagResource interface.
type MockTagResource struct {
	ctrl     *gomock.Controller
	recorder *MockTagResourceMockRecorder
}

// MockTagResourceMockRecorder is the mock recorder for MockTagResource.
type MockTagResourceMockRecorder struct {
	mock *MockTagResource
}

// NewMockTagResource creates a new mock instance.
func NewMockTagResource(ctrl *gomock.Controller) *MockTagResource {
	mock := &MockTagResource{ctrl: ctrl}
	mock.recorder = &MockTagResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagResource) EXPECT() *MockTagResourceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockTagResource) CreateTag(ctx context.Context, tagname string) (tag.CreateTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, tagname)
	ret0, _ := ret[0].(tag.CreateTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagResourceMockRecorder) CreateTag(ctx, tagname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagResource)(nil).CreateTag), ctx, tagname)
}

// DeleteTag mocks base method.
func (m *MockTagResource) DeleteTag(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagResourceMockRecorder) DeleteTag(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagResource)(nil).DeleteTag), ctx, id)
}

// GetTag mocks base method.
func (m *MockTagResource) GetTag(ctx context.Context, id int32) (tag.GetTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, id)
	ret0, _ := ret[0].(tag.GetTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagResourceMockRecorder) GetTag(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagResource)(nil).GetTag), ctx, id)
}

// GetTagByPostID mocks base method.
func (m *MockTagResource) GetTagByPostID(ctx context.Context, postid int32) ([]tag.GetTagByPostIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByPostID", ctx, postid)
	ret0, _ := ret[0].([]tag.GetTagByPostIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByPostID indicates an expected call of GetTagByPostID.
func (mr *MockTagResourceMockRecorder) GetTagByPostID(ctx, postid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByPostID", reflect.TypeOf((*MockTagResource)(nil).GetTagByPostID), ctx, postid)
}

// GetTags mocks base method.
func (m *MockTagResource) GetTags(ctx context.Context) ([]tag.GetTagsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx)
	ret0, _ := ret[0].([]tag.GetTagsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockTagResourceMockRecorder) GetTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockTagResource)(nil).GetTags), ctx)
}

// UpdateTag mocks base method.
func (m *MockTagResource) UpdateTag(ctx context.Context, arg tag.UpdateTagParams) (tag.UpdateTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, arg)
	ret0, _ := ret[0].(tag.UpdateTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagResourceMockRecorder) UpdateTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagResource)(nil).UpdateTag), ctx, arg)
}

// MockPostTagResource is a mock of PostTagResource interface.
type MockPostTagResource struct {
	ctrl     *gomock.Controller
	recorder *MockPostTagResourceMockRecorder
}

// MockPostTagResourceMockRecorder is the mock recorder for MockPostTagResource.
type MockPostTagResourceMockRecorder struct {
	mock *MockPostTagResource
}

// NewMockPostTagResource creates a new mock instance.
func NewMockPostTagResource(ctrl *gomock.Controller) *MockPostTagResource {
	mock := &MockPostTagResource{ctrl: ctrl}
	mock.recorder = &MockPostTagResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostTagResource) EXPECT() *MockPostTagResourceMockRecorder {
	return m.recorder
}

// CreatePostTag mocks base method.
func (m *MockPostTagResource) CreatePostTag(ctx context.Context, arg post_tags.CreatePostTagParams) (post_tags.CreatePostTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostTag", ctx, arg)
	ret0, _ := ret[0].(post_tags.CreatePostTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostTag indicates an expected call of CreatePostTag.
func (mr *MockPostTagResourceMockRecorder) CreatePostTag(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostTag", reflect.TypeOf((*MockPostTagResource)(nil).CreatePostTag), ctx, arg)
}

// DeletePostTag mocks base method.
func (m *MockPostTagResource) DeletePostTag(ctx context.Context, postid int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostTag", ctx, postid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostTag indicates an expected call of DeletePostTag.
func (mr *MockPostTagResourceMockRecorder) DeletePostTag(ctx, postid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostTag", reflect.TypeOf((*MockPostTagResource)(nil).DeletePostTag), ctx, postid)
}
