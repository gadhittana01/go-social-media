// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package resthttp

import (
	"database/sql"
	"github.com/gadhittana01/socialmedia/db"
	"github.com/gadhittana01/socialmedia/pkg/tag"
	"github.com/gadhittana01/socialmedia/pkg/user"
	"github.com/gadhittana01/socialmedia/services"
	"github.com/google/wire"
)

// Injectors from post_injector.go:

func InitializedPostHandler(ps PostService) (*PostHandler, error) {
	postHandler := NewPostHandler(ps)
	return postHandler, nil
}

// Injectors from tag_injector.go:

func InitializedTagHandler() (*TagHandler, error) {
	sqlDB := db.InitDB()
	queries := tag.New(sqlDB)
	servicesTagService, err := services.NewTagService(queries)
	if err != nil {
		return nil, err
	}
	tagHandler := NewTagHandler(servicesTagService)
	return tagHandler, nil
}

// Injectors from user_injector.go:

func InitializedUserHandler() (*UserHandler, error) {
	sqlDB := db.InitDB()
	queries := user.New(sqlDB)
	servicesUserService, err := services.NewUserService(queries)
	if err != nil {
		return nil, err
	}
	userHandler := NewUserHandler(servicesUserService)
	return userHandler, nil
}

// tag_injector.go:

var dbTagSet = wire.NewSet(db.InitDB, wire.Bind(new(tag.DBTX), new(*sql.DB)))

var tagPkgSet = wire.NewSet(tag.New, wire.Bind(new(services.TagResource), new(*tag.Queries)))

var tagService = wire.NewSet(services.NewTagService, wire.Bind(new(TagService), new(services.TagService)))

// user_injector.go:

var dbUsrSet = wire.NewSet(db.InitDB, wire.Bind(new(user.DBTX), new(*sql.DB)))

var userPkgSet = wire.NewSet(user.New, wire.Bind(new(services.UserResource), new(*user.Queries)))

var userService = wire.NewSet(services.NewUserService, wire.Bind(new(UserService), new(services.UserService)))
