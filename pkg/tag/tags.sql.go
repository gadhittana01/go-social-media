// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tags.sql

package tag

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
  tagname
) VALUES (
  $1
)
RETURNING id, tagname
`

type CreateTagRow struct {
	ID      int32
	Tagname string
}

func (q *Queries) CreateTag(ctx context.Context, tagname string) (CreateTagRow, error) {
	row := q.db.QueryRowContext(ctx, createTag, tagname)
	var i CreateTagRow
	err := row.Scan(&i.ID, &i.Tagname)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, tagname FROM tags
WHERE id = $1 LIMIT 1
`

type GetTagRow struct {
	ID      int32
	Tagname string
}

func (q *Queries) GetTag(ctx context.Context, id int32) (GetTagRow, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i GetTagRow
	err := row.Scan(&i.ID, &i.Tagname)
	return i, err
}

const getTagByPostID = `-- name: GetTagByPostID :many
SELECT 
	b.id,
	b.tagname
FROM post_tags a JOIN tags b
ON a.tagID = b.id
WHERE a.postid = $1
`

type GetTagByPostIDRow struct {
	ID      int32
	Tagname string
}

func (q *Queries) GetTagByPostID(ctx context.Context, postid int32) ([]GetTagByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTagByPostID, postid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagByPostIDRow
	for rows.Next() {
		var i GetTagByPostIDRow
		if err := rows.Scan(&i.ID, &i.Tagname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :many
SELECT id, tagname FROM tags
`

type GetTagsRow struct {
	ID      int32
	Tagname string
}

func (q *Queries) GetTags(ctx context.Context) ([]GetTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsRow
	for rows.Next() {
		var i GetTagsRow
		if err := rows.Scan(&i.ID, &i.Tagname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
  set tagname = $2
WHERE id = $1
RETURNING id, tagname
`

type UpdateTagParams struct {
	ID      int32
	Tagname string
}

type UpdateTagRow struct {
	ID      int32
	Tagname string
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (UpdateTagRow, error) {
	row := q.db.QueryRowContext(ctx, updateTag, arg.ID, arg.Tagname)
	var i UpdateTagRow
	err := row.Scan(&i.ID, &i.Tagname)
	return i, err
}
