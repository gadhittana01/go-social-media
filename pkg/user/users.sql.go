// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package user

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  fullname
) VALUES (
  $1
)
RETURNING id, fullname
`

type CreateUserRow struct {
	ID       int32
	Fullname string
}

func (q *Queries) CreateUser(ctx context.Context, fullname string) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, fullname)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Fullname)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, fullname FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID       int32
	Fullname string
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Fullname)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, fullname FROM users
ORDER BY created_at DESC
`

type GetUsersRow struct {
	ID       int32
	Fullname string
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Fullname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set fullname = $2
WHERE id = $1
RETURNING id, fullname
`

type UpdateUserParams struct {
	ID       int32
	Fullname string
}

type UpdateUserRow struct {
	ID       int32
	Fullname string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Fullname)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Fullname)
	return i, err
}
