// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: posts.sql

package post

import (
	"context"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  userid, title, description
) VALUES (
  $1,$2,$3
)
RETURNING id, userid, title, description
`

type CreatePostParams struct {
	Userid      int32
	Title       string
	Description string
}

type CreatePostRow struct {
	ID          int32
	Userid      int32
	Title       string
	Description string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Userid, arg.Title, arg.Description)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, userid, title, description FROM posts
WHERE id = $1 LIMIT 1
`

type GetPostRow struct {
	ID          int32
	Userid      int32
	Title       string
	Description string
}

func (q *Queries) GetPost(ctx context.Context, id int32) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, userid, title, description FROM posts
ORDER BY created_at DESC
`

type GetPostsRow struct {
	ID          int32
	Userid      int32
	Title       string
	Description string
}

func (q *Queries) GetPosts(ctx context.Context) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
  set title = $2,
  description = $3
WHERE id = $1
RETURNING title, description
`

type UpdatePostParams struct {
	ID          int32
	Title       string
	Description string
}

type UpdatePostRow struct {
	Title       string
	Description string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Title, arg.Description)
	var i UpdatePostRow
	err := row.Scan(&i.Title, &i.Description)
	return i, err
}
